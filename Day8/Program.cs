using CommunityToolkit.HighPerformance;
string input = "002220021312231312222033343421330303240001434141231331323404031022114013434333010230221020221020022\r\n121122120202012020121043013102221221435521112422443242343123513341010302410221342010223030013102200\r\n000102113102200232304033323331230042243225545423222145155353323244444103030341114102200110230210210\r\n210000210011313230124421403131035424212553341224354235111554525424232312243334330011232213102110221\r\n011221213013233101202214421014211444113354135545433143234341354155455431402040121341332111001213200\r\n102011200323032042010300400433425523314114545134123354514144125244221425322110331241203233303212321\r\n102333112233124011310312033433351241332441511153434514142551252434413454525133430430232301313012101\r\n211211123303442031043123115213455152541435522242266645543311341343514541312331003041323121132333230\r\n001321210013322412003145152352533215251266535255436246225646232235155455213434510131104234003003222\r\n223300223021202423423443531414132551356424245326334266655533565213421321535315422410221142133031312\r\n222100212043241001125454253523452134533223365232264243252423323432612224141255512031323011313003103\r\n021121103403121443434132421553436423352664246453242666446362544432226535142445142544021324240001211\r\n133332012412432333133345415214366446545565543462332546664335363355632655443241344522421402100130202\r\n203311422144324333445534552346564665545464453356346434642563543262655253451122554135410444243311311\r\n322001144142332343512222522324564232262466666644733543366455434326365635422423142542532442322034233\r\n101313214102402432135211163436536554325523756753777636774442234646434532462532323552412110323232323\r\n001234101142053124341452526452436566623744636336343435367647546635623353553555534224231314214100212\r\n011340142113121313424442565642324364776443464557637463364534454646665424552553413532212514302012341\r\n131222200221422152343654426266433667545366347373774775466374344436764353332356464535514434324340110\r\n111003023342553555436244262523625335453474533637454347543437747544744452225334642442335223143444444\r\n321342121452254343244365542366665534457746575473573344454777777733474472444242626215251353540020101\r\n112143303315213335256234665554477437377636773577545734476555474364535534426563254464121321342443010\r\n234221035235112225663223532437466537576546445657685585555367446553357466742263556432335535233141333\r\n222423221324421313653564633554665443633556667677566864675574576677657463472426635262534215124024221\r\n324331152222354262443463537535377475436657674545875474876844577557734435563264343363652233415524410\r\n213342122353141336533663276453775344477647556654774756865757686866756357447742256452564542442334022\r\n031310253121515643256663543343774374464475868668856447745665786466775333667666543356266334544230111\r\n003414153141543253444633475333643566678746567545465484644456865746567655663777455623456224131310102\r\n330142523253452632255556734446376546656754857454455688868674648457646443377555553462454615251453442\r\n133235545322333532564577755447648846778644645755887995696448544647577553657663736532335515233432204\r\n334335524535365552354756376746487575645445659755695765666787544578886583475443775453346362431143131\r\n341031551123323343266454736348684858484889599858696567585876875856777548475375347666344435552535130\r\n330124132352653624374474564584845574667585775689557998777788587447485878554574675446242255332135430\r\n022332341314322336445375435566746866478875855558865695755978785575785875787557756366564323334355421\r\n422512114322233253336344454648844756687768565958568995898568666686676864785573463376463556254314532\r\n103452142442634255644464378667858765668577695986766569979865855566666464448666555466453356541352555\r\n241112442533463566644466384475785778588865998998987687878685758585665474766754566466245444341351111\r\n242331514626445247647536577786867686956757887867997868868565789798577586688475374636425346525131421\r\n243314253655642337357775774485658855797598667666899989967796597576898668686444477753324232232351154\r\n141212322533446654653434488448555885596757899977797669696788657787555457687585673655426445422433424\r\n342122455562335353366637887665858986966688896796677969888697689675958786488564747444335354224244114\r\n312551335256534266765767457478789957996778878677968997797796765897866875565887677747646635544512542\r\n211534134626623545346577744877677876857796986969678796966776968959655984565744445456734645346232512\r\n032231543234465677337374577887787968857667678778778977789989896785756795858858774466662336446214512\r\n324534154425536743565446458446858967886787686879898778778766688758858698485648874353672463266531234\r\n435134112333555443375367474578758968688997879997977798878668997879689696565868444476554256336155424\r\n415141242653322635673376487876767958867777897899878989988966688858578595645554834563765634653311443\r\n333153263566332363556565647675776889997977998798979989789779878767599668677764763567736353533453222\r\n324533443324323546474686475757577689889799697979879899988679887776859589545565675357363456543514214\r\n541212526226223464775746748666766598968767978778799799798889796767886998655687843577354334262542222\r\n254152122622335364377555764858997897878877898777778878987979889696555579776547754776646635325242443\r\n233322465646563366564454647465965779689999699998999997777987688766899995784766835357675264423235125\r\n535451544662624547343458788846585555988689797879987987777878766896757589544864553377356554234332115\r\n244155565332636373565485774649696779997697667779778999898989987886985757674786675646374345632323155\r\n541445123454425766545765876866698666699986888787877988888968997758669898748856774455664363534535245\r\n455333345362435745575658765456987788888989966788777799798897779657686755844678835677774462453432523\r\n221534413542463536734757867768888675877686879688897878998879669688977768885557754643352225526224333\r\n221234516433463336765777686785786979666796878779797869789769666688997978844648636667643543232444133\r\n332215426646234434537648668445869988799778678686878967687668768657879955656846347743656535222133422\r\n031553553463354667655574475474488786777686996886779777887886867775767548458866434657666522253512145\r\n331532316364356445453744448764666787785586687678778969697798769655779847465578374664546445324424334\r\n231442532632664337564767657644566986698596889799897977969897769799988688455757473356424325365512353\r\n411553532344436334565736755688777565758689667688779789696666578858657666568855774576363253255223545\r\n142243141626243333657765468644745995798775976978979869767759758699574774455763666347225335254143154\r\n434542532345526233743743645456757487695765886898969876785665857797756868557564677455336336551245453\r\n242111213336234342634744347655654759597665895975786988997859879785674785466364664476642426523334413\r\n240432541545646555637655375878747648689956699797668787668987857785877748855353544573343263423351451\r\n233353541126663465447637576756467765799985779857685597778958855944587564657567344425653566513324251\r\n202133125415524635556354365368576748667886559966988689898777998784678575655573455765246634331111323\r\n214241132111456463244677753468567888865459986568778556756857554488444844574373477643253433514113414\r\n404043331523632565246656343354566578548867897777799576599855576486586885647776646654645643421251434\r\n321431341441524644343774675764678486487885575766685789987548644455655465455574763334325643223532112\r\n312044135522435234264466734356344664746887668755765684564685544655877565747654532452656321312254240\r\n221443411432246553232444575537753577667488768677578665484847677754883754573376245624364553144524310\r\n333011355143132662522563635437666768647485448557477746476767655566765543476573262345334242422532040\r\n130221313353423632635345377635457345475858877766844478544578458753453567556654264564563111241221424\r\n420000412311333223455353344535675346674758458678588744648777864536643447536366432335235213533510131\r\n033211203422344216654546246576546347545346767685845774858574755653734736666352442234431433312122020\r\n420112221555544554533234236234734667465467566545488844644654555366376734646542254343325451511102040\r\n120131424153254535662246332535575674733567577374535555633745576736633645534235222461444514331311422\r\n213413130454123421355422255452563464655444643735457443555675634373377635255435222352513552212031020\r\n003020114244244432233353656455567667744454636765475774754663376447476625234623436352314413331402042\r\n324044223442544345113455525643466577777675355766774773637445365463522332325642562435514442142404141\r\n210441410124444533445153545634656623447563677736473335673574337754666335462353221213524122021303233\r\n220001402334314112552325546465543662455673446333744466773363533553456364646542224332314211402042433\r\n023121402021311422535432445424233646345224547753633435644474236362532444465321253221141144332413310\r\n323020230034123314134444533446535564436335465334366443566523243354226225646253351453120014034104303\r\n312321342442214055412542111145545344545643544554353232456465256462323445343525123442530123340220021\r\n123101342024104423223521423214332556563335635536633462555625643665222463242344244522332431230422020\r\n300202224124443140142225324453536234525546225346366434644466234244662333545341335424243412214111222\r\n230103311300324320142422532144424144356464635656343323243433326662623345523535351332140310322302320\r\n102213121041413130343312325141341341255366646363663225633336454234535134543235451400033131103312302\r\n220010012323010223213414114534555442121353366562642344263362424334153543414344531223433101022121003\r\n111303131132410340323210521254433532435211213444624335211322534254443353121223030123212013112122222\r\n221300032203340322340214302442511523252243154411411131132224142542512334245223323243012130220310111\r\n210202131021310312212042132343151311311552432124522351251323142332524114321412240003424203112223000\r\n120001230322001230123443443202113524332314432515141344214224414354425231021342403441230201112313220\r\n000101310102010302144343300032331251425155511533145124553435221424141440223210230440103301210001022\r\n111021010130123300013234210112002104312354542225421421441334253132031032244142134422332001101011222";

var trees = BuildTreeMap(input);
var count = CountVisibleTrees(trees);
var score = HighestScenicScore(trees);

Console.WriteLine("");

Span2D<int> BuildTreeMap(string input)
{
    var rowsSplit = input.Split(Environment.NewLine);

    var rows = rowsSplit.Count();
    var columns = rowsSplit.First().Length;

    int[,] treeArray = new int[rows, columns];

    for(int i = 0; i < rows; i++)
    {
        var column = rowsSplit[i];
        for(int x = 0; x < columns; x++)
        {
            treeArray[i, x] = int.Parse(column[x].ToString());
        }
    }

    return new Span2D<int>(treeArray);
}

int CountVisibleTrees(Span2D<int> trees)
{
    int visibleCount = 0;

    for(int i = 0; i < trees.Height; i++)
    {
        for(int x = 0; x < trees.Width; x++)
        {
            if (IsTreeVisible(trees, i, x))
                visibleCount += 1;
        }
    }

    return visibleCount;
}

bool IsTreeVisible(Span2D<int> trees, int treeRow, int treeColumn)
{
    if (treeRow == 0 || treeRow == (trees.Width - 1))
        return true;

    if (treeColumn == 0 || treeColumn == (trees.Height - 1))
        return true;

    var value = trees[treeRow, treeColumn];

    var row = trees.GetRow(treeRow);
    var column = trees.GetColumn(treeColumn);

    // Visible up
    if (column.ToArray().Take(new Range(0, treeRow)).Max() < value)
        return true;

    // Visible down
    if (column.ToArray().Take(new Range(treeRow + 1, column.Length)).Max() < value)
        return true;

    // Visible left
    if (row.ToArray().Take(new Range(0, treeColumn)).Max() < value)
        return true;

    // Visible right
    if (row.ToArray().Take(new Range(treeColumn + 1, row.Length)).Max() < value)
        return true;

    return false;
}

int HighestScenicScore(Span2D<int> trees)
{
    int highScore = 0;

    for (int i = 0; i < trees.Height; i++)
    {
        for (int x = 0; x < trees.Width; x++)
        {
            var score = GetScenicScore(trees, i, x);
            if (score > highScore)
                highScore = score;
        }
    }

    return highScore;
}

int GetScenicScore(Span2D<int> trees, int treeRow, int treeColumn)
{
    var scoreLeft = 0;
    var scoreRight = 0;
    var scoreUp = 0;
    var scoreDown = 0;

    var value = trees[treeRow, treeColumn];

    var row = trees.GetRow(treeRow);
    var column = trees.GetColumn(treeColumn);

    // Score up
    foreach(var tree in column.ToArray().Take(new Range(0, treeRow)).Reverse())
    {
        scoreUp++;
        if(tree >= value)
        {
            break;
        }
    }

    // Score down
    foreach (var tree in column.ToArray().Take(new Range(treeRow + 1, column.Length)))
    {
        scoreDown++;
        if (tree >= value)
        {
            break;
        }
    }

    // Score left
    foreach (var tree in row.ToArray().Take(new Range(0, treeColumn)).Reverse())
    {
        scoreLeft++;
        if (tree >= value)
        {
            break;
        }
    }

    // Score right
    foreach (var tree in row.ToArray().Take(new Range(treeColumn + 1, row.Length)))
    {
        scoreRight++;
        if (tree >= value)
        {
            break;
        }
    }

    return scoreUp * scoreLeft * scoreRight * scoreDown;
}